---
title:  "The Fault In Our Requirements"
date:   2021-11-09 09:00:00 -0500
categories: jekyll update
color: blue
layout: post
---

<div class="banner"><img src="/assets/gfci.png"></div>

As a rule, I strongly advise against using terminology like "requirements" or "outcome criteria" to describe things that are not actually requirements or criteria for the work desired. This sounds obvious, but consider how many software development tickets have "requirements" that are, in reality, mere aesthetic preferences. Indeed, these "requirements" may even be (variously and on a case-by-case basis) intended as a starting point for discussion, and not as requirements at all. As an engineer, this is doubly annoying: not only do the provided requirements needlessly serve to constrain that discussion by counterfeiting what should be the ultimate authoritative part of the ticket, but the _actual_ requirements will usually then be missing entirely! Essential context and knowledge are lost.

In the average case, these requirements can seriously mislead the developers tasked with their completion, particularly if the developers haven't yet accrued the years of experience it can take to intuit a ticket's hazards or blind spots. I once worked with a junior engineer, for example, to figure out exactly why a ticket demanded that certain data be retained for 7 years—sounds like a regulatory requirement to me—and whether that actually entailed any engineering work. It turned out the data in question were preserved on the invoices we generated for our customers, which were themselves retained indefinitely. A complicated and brittle piece of engineering work to guarantee against loss of that data was averted. On the other hand, by presenting that need as a requirement of a single technical ticket to expose and collect an additional piece of data on our website—other requirements in the ticket were the precise UI changes requested—it called into question whether or not the _real_ requirement it represented (the legal, regulatory, or accounting need) was being sufficiently safeguarded across _all_ our systems, processes, and future work tickets. 

In the worst case, though, ill-formed requirements can be dangerous, both technically and as a matter of life and death. On a technical level, consider a request to upgrade a website to use TLS (a.k.a. SSL or HTTPS.) If we're thinking in terms of tickets and requirements, what's going to be considered appropriate, at the average company? Typically that might be something along the lines of "The web server has the certificates installed, and can be visited via HTTPS, with users seeing the lock icon in their browser." Seems straightforward enough, and so the ticket is farmed out to the newest team member to build their experience with the backend system. A few days later, we're redirecting all insecure requests to HTTPS. Someone gets to check off a box on their Key Initiatives slide. Meanwhile, the engineer got it to work by disabling hostname verification, or any number of other hacks or misconfigured settings that present the same _appearance_ as a properly installed SSL certificate, but actually represent significantly or even totally compromised security.

Let's consider how an ill-formed requirement can even be dangerous to human life. For this I'm going to shift laterally a bit, from software to a slightly more primal force: electricity. In particular, the ill-fated combination of electricity and water. If we're remodeling a bathroom, it will assuredly be a code violation to install a basic electrical outlet. Instead, we'd install something called a Ground Fault Circuit Interruptor, pictured above. This is a wonderful example of a piece of equipment doing exactly what it says in the name: if there's a ground fault, the circuit is interrupted. The happy path here is for electricity to leave one of the leads, move through the device using it for energy, and then to return to the outlet via the other lead. If, instead, a circuit is completed through the _ground_—as through a person soaking in a bathtub—the outlet will trip instantly, disconnecting the power and hopefully saving a life. 

We're installing the outlet because we want electricity in the bathroom, but, crucially, _providing electricity is not a requirement of the installation work._ How can it be the case that actually providing electricity is not a requirement, when that's our whole reason for installing the outlet in the first place? Simply put: it's entirely possible that the outlet _cannot_ be properly installed _and_ usefully provide electricity, if there are other problems present or the outlet in question is defective. In actual fact, the _real_ requirement is that the outlet _not_ provide electricity! It should _not_ provide electricity in the presence of a simple ground fault, for example. Even something like "it should provide electricity _safely_" would not be valid since, again, it may not actually be possible to do so within the scope of this work.

You might be thinking: well, sure, but that's a higher-level requirement which is essential context for the engineer doing the actual work. Indeed it is, and I salute your process sanity. Involving engineers at the higher level, and ensuring they have that broader context, are both great ways to avoid unnecessary problems with ill-formed ticket requirements. It should be considered a major process smell, however, if ticket requirements largely substitute for that involvement, _especially_ if the ticket is the very first point of involvement for the engineer being assigned the work.