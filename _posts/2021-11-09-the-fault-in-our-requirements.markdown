---
title:  "The Fault In Our Requirements"
date:   2021-11-09 09:00:00 -0500
categories: jekyll update
color: blue
layout: post
---

<div class="banner"><img src="/assets/gfci.png"></div>

As a rule, I strongly advise against using terminology like "requirements" or "outcome criteria" to describe requested engineering work, if those things are not actually requirements or criteria for the work desired. This sounds obvious, but consider how many software development tickets have "requirements" that are, in reality, mere aesthetic preferences. Indeed, poor "requirements" may even be (variously and on a case-by-case basis) actually intended as a starting point for discussion, and not as requirements at all, although you'd be hard pressed to know when this were the case! As an engineer, this is doubly annoying: not only do the provided requirements needlessly serve to constrain that discussion by counterfeiting what should be the ultimate authoritative part of the ticket, but the _actual_ requirements will usually then be missing entirely! Essential context and knowledge are lost.

In the average case, these "requirements" can seriously mislead the developers tasked with their completion, particularly if the developers haven't yet accrued the years of experience it can take to intuit a ticket's hazards or blind spots. I once worked with a junior engineer, for example, to figure out exactly why a ticket demanded that certain data be retained for 7 years—sounds like a regulatory requirement to me—and whether that actually entailed any engineering work. It turned out the data in question were preserved on the invoices we generated for our customers, which were themselves retained indefinitely. A complicated and brittle piece of engineering work to guarantee against loss of that data was averted. It took a phone call from an engineer to the company's general counsel to nail that down, however—the manager who _wrote_ that requirement couldn't actually explain it or reckon with the implications. On the other hand, the ticket included pixel-perfect design mockups telling us exactly where the form field had to be added on the website! Ultimately, by presenting that abstract business concern as a requirement of a change request ticket to expose and collect an additional piece of data on our website, it called into question whether or not the _real_ requirement it represented (the legal, regulatory, or accounting need) was being sufficiently safeguarded across _all_ our systems, processes, and future work tickets. 

In the worst case, though, ill-formed requirements—coupled with engineers disempowered or otherwise culturally disinclined to take ownership over the outcomes of their work—can be dangerous, both technically and as a matter of life and death. On a technical level, consider a request to upgrade a website to use TLS (a.k.a. SSL or HTTPS.) If we're thinking in terms of tickets and requirements, what's going to be considered appropriate, at the average company? Typically that might be something along the lines of "The web site can be visited via HTTPS, with users seeing the lock icon in their browser." Seems straightforward enough, and so the ticket is farmed out to the newest team member to build their experience with the backend system. A few days later, we're redirecting all insecure requests to HTTPS. Someone gets to check off a box on their Key Initiatives slide. Meanwhile, the engineer got it to work by disabling hostname verification, or any number of other hacks or misconfigured settings that present the same _appearance_ as a properly installed SSL certificate, but actually represent significantly or even totally compromised security.

Why might this happen? Well, if a company's process is that a non-technical manager has to write any and all tickets, and they write requirements in the form of things they themselves can verify (and furthermore if engineers are expected merely to work week-to-week on whatever tickets they're assigned, working them exactly to spec and mock...) then you're creating a perfect environment for thoughtless, shoddy work that goes from start to requirements as quickly as possible. This applies doubly if the work involves a fair amount of user interface changes: there's nothing corporate bureaucrats like to micromanage more than software user interfaces, and this often puts engineers in the double-bind of being expected by their engineering managers to exercise sound judgement, while simultaneously being given almost no flexibility or autonomy by their real task masters, for large swaths of their work.

Let's consider how an ill-formed requirement can even be dangerous to human life. For this I'm going to shift laterally a bit, from software to a slightly more primal force: electricity. In particular, the ill-fated combination of electricity and water. If we're remodeling a bathroom, it will assuredly be a code violation to install a basic electrical outlet. Instead, we'd install something called a Ground Fault Circuit Interruptor, pictured above. This is a wonderful example of a piece of equipment doing exactly what it says in the name: if there's a ground fault, the circuit is interrupted. The happy path here is for electricity to leave one of the leads, move through the device using it for energy, and then to return to the outlet via the other lead. If, instead, a circuit is completed through the _ground_—as through a person soaking in a bathtub—the outlet will trip instantly, disconnecting the power and hopefully saving a life.

We're installing the outlet because we want electricity in the bathroom, but, crucially, _providing electricity is not really a requirement of the installation work itself._ How can it be the case that actually providing electricity is not a requirement, when that's our whole reason for installing the outlet in the first place? Simply put: it's entirely possible that the outlet _cannot_ be properly installed _and_ usefully provide electricity, if there are other problems present or the outlet in question is defective. In actual fact, the _real_ requirement is that the outlet _not_ provide electricity! It should _not_ provide electricity in the presence of a simple ground fault, for example. Even something like "it should provide electricity _safely_" would not be valid since, again, it may not actually be possible to do so within the scope of this work. 

You might be thinking: well, sure, but that's a higher-level business requirement which is essential context for the engineer doing the actual work. Indeed it is, and I salute your process sanity. Involving engineers at the higher level, and ensuring they have that broader context, are both great ways to avoid unnecessary problems with ill-formed ticket requirements. It should be considered a major process smell, however, if ill-formed ticket requirements largely substitute for that involvement, _especially_ if the ticket is the very first point of involvement for the engineer being assigned the work. The problem, ultimately, is when "requirements" are primarily understood to mean things that are _required of the engineer working the ticket_, and I propose that at most companies this is exactly how "requirements" are intended, and perceived.

Of course, all of this is coming from the perspective of trying to engineer software at a large corporation, where most tickets are straight-up _change requests_. If the final engineering ticket is the end result of a top-down waterfall process, describing specific software development work in detail, then the hard-and-fast technical requirements _must_ be on point. If you want waterfall, then you gotta waterfall, otherwise you're virtually guaranteeing that _no one_ is ultimately responsible for the quality and appropriateness of the engineering work. Requirements for a high-level user story, on the other hand, are an entirely different matter. A user story for that electrical outlet installation _would_ have as a requirement that there be safe, reliable electricity in the bathroom. That works because a user story doesn't try to constrain the engineering or micromanage the engineers, and are merely a starting point for discussion and problem solving, rather than a work order or specification. The requirement in that case isn't a requirement of the _engineering_, but a requirement that must be fulfilled for the _user, customer, or business value_ to be deliverable. Confuse the two at your peril.
