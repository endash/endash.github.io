---
title:  "When Agile Isn't"
date:   2016-01-30 12:00:00 -0500
categories: jekyll update
color: orange
layout: post
---
About three years ago I left an NYC app startup—which I will not name here—after just over a year there. The immediate cause was personal: the emotional stress from an increasingly perilous interpersonal environment on top of an unsustainable and severe "crunch time" schedule brought me to my breaking point. Before too long the root causes that ultimately underlaid my own departure brought the entire company to the breaking point, as well. For a while there was guilt—I should've done more, worked longer, had better ideas, been less of a perfectionist—and then there was a lot of anger. Lately, there's something like acceptance of what happened and my role in it. I don't know how closely the mental process I went through followed the stages of grief, but most of them were in there somewhere.

A lot of things were conceived of wrongly, planned wrongly, executed wrongly, and finally went wrongly. This isn't a story of how a short-funded startup with a popular niche app (at one point featured in an early iPhone "there's an app for that" TV advertisement) gets put into the ground. Instead, this is a cautionary tale of what can happen when Agile goes wrong. It's easy to claim to be "Agile" when what you really mean is that you're just too small to have built up a bureaucracy around software development. In my case, there were some big warning signs that I completely ignored or didn't know to look for, until it was too late.

## The Complete Rewrite

What really attracted me to the company at first was the somewhat unique combination of a popular, seemingly simple app with a loyal user base that also had an atrocious user experience. It was well into the second version, both written by a contract studio, and had accumulated a fair bit of cruft around an initially awkward navigation scheme. It was a fantastic opportunity—fix up the design, make a popular app even better, and put a nice feather in my cap while simultaneously ridding the company of a chain around its ankle. I know I went into the position knowing we were going for "complete redesign," but I'm pretty sure we didn't decide on the complete rewrite until later. I don't think there was any serious discussion of NOT doing a complete rewrite. That was a mistake.

The rewrite is basically pressing a reset button on your app. Almost everything gets thrown out, code-wise. You usually also decide to take advantage of newer tools and technologies, so some knowledge, experience, and time gets thrown out as well, in effect. Any testing, code confidence, or support history is gone. You're starting completely from scratch. It can be pretty appealing, especially if you have no sentimental attachment to the current code base. It can also be disastrous.

In our case, a rewrite meant cutting ourselves off from Our App 2.0, our users, and all of our success up to that point. Rather than iterating feature-by-feature, cleaning up and improving the app by degrees, and letting our users come along with us while we improved a stable code base into the app we wanted we instead effectively stopped development—from the outside perspective—and got lost in an increasingly hellish year of trying to recreate what we already had. Finally, when the app was released, an explosion of user anger completely rejected the rewritten app, which plummeted to single star territory in the App Store.

## The Grand Vision

At the root of the guilt I felt after the company folded was my role at the very start of the process. I don't remember if this happened after we decided on the rewrite or if it was part of the discussion. Either way, I went into a planning meeting for 3.0 to pitch my vision, and it was a doozy. In hindsight, it probably could have been a 3-5 year vision, or even just a concept around which to build reasonable, real-world plans. In actuality, everyone either loved it or accepted it without much comment and it became our 6-month blueprint. Words and phrases I used—often simply as concept or metaphor—were explicitly applied to features and concrete elements in the app. Some of them even ultimately appeared on the marketing website after release.

Even Agile, which eschews specifications and up-front planning, has an ultimate objective that, at its core, will remain more-or-less fixed, barring catastrophe. The Vision was at once too much and too little—too ambitious and over-specified to give us the flexibility to adapt in order to preserve our core objective, and too underspecified to let us anticipate, plan for, and handle the problems we were going to hit. It got to the point where I would cringe every time someone would use one of those words I threw out during the pitch, which were increasingly sacrosanct, even as development dragged on and things just weren't coming together.

## The Business Case

I have to first say that I have the business awareness of a fruit fly—I once accidentally got going on a rant about "vulture capitalists"—while talking to a venture capitalist. If you need me outside of the dev shop for anything it'd better involve coaching and clear expectations of what it is I'm needed to wear, do, and say. That said, I understand the point of a business is to make money, and ultimately the responsibility of the CEO is to see to that. I have tremendous sympathy for a guy trying to turn an early, surprising success in the app space into a going concern with just a few months of time and with less than a million dollars raised.

What that meant for the developers is that the concept that was pitched and embarked upon for 3.0 quickly became an iron-clad part of the business plan. I was in no way involved in or privy to the money-raising or deal-making, but I saw how quickly what should have been a "stretch goal" became a hail mary, a hill for the company to die on for lack of anything else to do. It's hard to be "agile" when your "minimum viable product" is determined not by your users or the features you want and can implement quickly, but by the need to meet unyielding business case requirements. Our "minimum viable product" was the company-saving potential of a "Wow!" release that would knock everyone's socks off.

That reality, spoken or unspoken, set the tone for the majority of the development process, but it also manifested in very concrete ways, particularly during the end. We were writing code, designing interfaces, and implementing features for at least one business development deal that could be described, at best, as "ancillary." Another was in the talking-and-planning stages but, thankfully, didn't progress to the point of actually bogging down the development work. Agile, like any methodology, must be put to use in service of the company's broader business goals—but it is also easy for it to be sabotaged by *specific* business goals. With money running out and everyone on edge it can be hard to see the difference.

## The Unending Marathon

For me the most important tenet of Agile is "release early, and release often." This is the distillation and union of three simple ideas: the minimum viable product, the sprint, and producing "usable software".

The "MVP" can mean a lot of things to different people—there's a graphic out there somewhere ridiculing the idea that the MVP for an automobile is a push scooter, rather than, for instance, a bare chasis with 4 wheels and an engine. Whatever actual form it takes, in order to be meaningful it has to be two things: (1) Comprised mostly or entirely of code and features that will continue to be relevant for the entire remaining development process and (2) A fairly small fraction of the entire development process. Simply put: you need both something *small* and something you can build *around*.

A sprint is a well-defined period of time (1 or 2 weeks), at the beginning and end of which you should have a high quality piece of software. This is the "usable software" part—sprints are meant to be a sustainable, cyclical process of evolving a piece of software incrementally while maintaining high standards for the product at each junction.

For various reasons—implicit cultural reasons and unspoken business reasons—we weren't ever going to consider releasing ANYTHING until we had 3.0 wrapped up in a bow. Unfortunately, it's really easy for "MVP" and "usable software" to become a joke when nothing actually has to get released to anyone. Sprints become simple deadlines, which are blown through or extended as convenience requires. Our idea of "usable software" was whether the damn thing compiled and passed tests, not whether we had a piece of high-quality, releasable software at the end of each sprint.

On the flip-side, we went through a lot of changes with each sprint. Sprints felt like an excuse or opportunity to make or propose changes in a pretty ad-hoc fashion. Every time a sprint ended and I looked at the awkward, half-finished app there was another big tweak I wanted to make to steer it back towards the Vision. The sprint imposed upon our rigid big-picture plan a lattice which brought the lack of small-picture plan into stark relief. It was easy to see where things on a high level weren't working, and all I could do to fix that was muck with them on the immediate scale of the sprint and whatever features we were working on at the time.

The closer we got to the finish line, the further away it seemed to be. At the end it felt like we were standing still. It was very distressing to find myself, after 10 grueling months, staring across the canyon between where we were, and where we needed to be a month ago—with no path across. It was increasingly paralyzing, and the only plan anyone else had was just to churn through the remaining holes to get us up to the near edge of the cliff. Rather than let the MVP, each sprint, and our releases guide our development we had random-walked right into oblivion.

## And So It Goes

Like I said at the beginning, a lot of things went wrong. I don't know how things would have turned out if we had been more Agile, in a meaningful way. I'd like to think we'd at least have put out some pretty good software releases along the way. I'd also like to think that, regardless of the outcome, my confidence as a developer and designer would have held up much better. Whether we'd have kept the amity of our users, or satisfied our investors... who knows. Maybe there wasn't any winning—we were short on time, money, and room to maneuver in our industry. Maybe, in the end, we were always fated to be one of the 90% of startups that fail. The only thing I really know for certain is that whatever we were, from start to finish, we weren't Agile.

